1. 흐름제어 구문

- 순차구조 : 문장이 나열된 순서에 따라 차례로 실행하는 구조

- 조건제어 : 지정된 조건에 따라 실행흐름을 제어하는 구조 예시: if문,switch문

- 반복제어 : 정해진 범위의 문장을 반복적으로 실행하게 하는 구조 
  예시 : for문,while문,do while문


2. 구조체와 클래스

2.1 구조체 (Java의 객체와 비슷한듯)
  - 여러 가지 자료형의 데이터 집합을 저장할 수 있는 새로운 자료형을 정의한 것
  - 구조체는 내부 데이터 항목들을 외부에서 자유롭게 사용하도록 공개하는것이 기본값이다.
구조체 선언문 예시 :
 struct StructName{
	Type1 item1;
	Type2 item2;
};

2.1.2 구조체 데이터를 처리하는 함수
 - C언어에서는 구조체와는 별개의 함수로 정의함



2.2 클래스
- 표현하고자 하는 대상(객체)의 데이터(속성)와 함께 그 대상이 할 수 있는 동작을
 나타내는 함수(행위) 들을 묶어서 선언한 것
- 클래스는 내부의 구현을 감추는 것이 디폴트


3. 배열

- 동일한 자료형의 값을 여러 개 저장할 수 있는 연속적으로 할당된 공간을 묶어 변수로 만든 것
- 각원소는 0번부터 시작하여 차례로 부여된 인덱스를 이용하여 액세스 함
- 배열의 차원 : 배열의 첨자 개수


3.1.2 배열의 초기화
예시: int a [5] = {1,2,3,4,5};


4. 포인터
- 어떤 대상이 위치한 곳을 가리키는(주소를 저장하는) 변수
  가리키는 대상 : 포인터에 지정된 자료형에 해당되는 변수,동적으로 할당된 메모리,함수 등

-포인터 선언 형식
 ex)TypeName* ptrVar;




4.1.2 포인터의 사용
- 포인터가 유효한 대상을 가리키게 한 후 사용해야 함

ex) ptrVar = &var;        //&는 주소값 
    *ptrVar = value;      


5. 동적 메모리 할당

- 프로그램 동작 중에 기억공간의 필요성 및 소요량을 결정하여 필요한 공간을 할당하는 것
  * 기억 공간의 생성 시점 : new 연산자의 실행 시점
    기억 공간의 소멸 시점 : delete 연산자의 실행 시점
- 포인터 변수가 할당된 기억 공간을 가리키게 함


5.1.2 동적 메모리 할당

포인터에 메모리를 할당,반납하는 형식

- 메모리 할당 연산자
ptrVar = new TypeName;
ptrVar = new TypeName[n];

- 메모리 반납 연산자
delete ptrVar;
delete [] ptrVar;


- 단일 데이터 공간의 할당 및 반환
int* intPtr;
intPtr = new int;  // 자유 메모리공간 참조
*intPtr = 10; 
delete intPtr;  // 메모리 삭제
intPtr = nullptr; // 아무것도 가르키지않는 nullptr로 마지막에 선언   


6. 참조
- 어떠한 대상을 가리키는 값(포인터와 유사함)
- 참조 변수는 참조 대상의 별명처럼 사용할 수 있음
- 참조는 반드시 초기화가 필요함
- I-value 참조 : 실체가 있는 대상에 대한 참조
TypeName& refVar = varName;

const 참조
- 참조 변수가 참조하는 대상의 값을 바꿀수 없음
 ex) const int& xRef = x;


참조 포인터 차이

- 참조 변수를 이용하여 값을 읽거나 저장할 때 참조대상 변수를 사용하는 형식과 동일함
- 참조 변수는 초기화를 통해 반드시 어떤 대상을 참조해야 함
- 참조 변수는 초기화를 통해 지정된 참조 대상을 바꿀수 없어, 하나의 대상만 참조할  수 있음


