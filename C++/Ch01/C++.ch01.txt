1.
1)키워드
- C++언어에서 미리 용도를 정해놓은 단어
- 정해진 용도로만 사용해야함

ex) using , namespace , int , return


2)식별자

- 여러가지 대상을 구분하기 위해 만든 이름
  ex) 변수나 함수, 클래스 등의 이름

*규칙
- 첫 자는 비 숫자 문자를 사용함 
  ex) 영문 대 소문자와 _ ( '_'로 시작하는 문자는 추천하지않음)
- 이후의 문자는 비 숫자 문자와 숫자를 사용함 (특수문자X)
- 길이 제한은 없음
- 키워드는 식별자로 사용할 수 없음
- 단어구분을위해 스네이크표기법,낙타표기법,'_' 기호 등을 적절히 사용


2. 기본 자료형 및 상수와 변수
1) 기본자료형
  - 정수자료형 / 실수 자료형
  
  복합 자료형
  - 배열,구조체,클래스,열거형,공용체
  - 포인터,참조


2.1.1 정수자료형
 - 고정소수점 방식의 숫자 표현
    ex)문자 표현 자료형(char),정수표현자료형(short,int,long,long long),참/거짓 자료형(bool),다국어 표현자료형(wchar_t,char16_t)

2.1.2 실수자료형

 - 부동소수점 방식의 숫자표현
  float(4byte)
부호 1비트,지수부 8비트, 가수부 23비트로 구성

  double(8byte)
부호 1비트,지수부 11비트 , 가수부 52비트로 구성



2.2 리터럴

- 정수형 리터럴 ('0'~'9'까지의 숫자,'a'~'f'와'A'~'F'의 16진수표현을위한 문자)
 
ex)접두사를 이용한 표현 : 10진수,2진수(0b),8진수(0),16진수(0x)
    접미사를 이용한 자료형 지정 : 123u(unsigned int형),123L(long형),123ul(unsinge long형),123ll(long long형)
 
- 문자 리터럴
  작은 따옴표 안에 문자를 표기하는 방법
  8진수나 16진수 문자 코드를 표기하는 방법
ex) 'A'(ASCII코드에 해당되는 정수 65와 동일)
    '\101' ('A'와 동일함 65의 8진수 표현) , '\x42'('A'와 동일함 65의 16진수표현)


- 실수형 리터럴
  소수점이 있거나 10의 거듭제곱을 표현하기 위한 지수기호인 'e'가 있으면 실수형 리터럴임

ex)1200. 
    1200.0
    12e2
    1.2e+3   =>double형 값

   1200.0f
   12e2f   => float형 값
   

2.3 변수
 - 프로그램이 실행되는 동안 기억하고있어야 하는 값들을 저장하는 메모리 영역
 - 변수에는 자료형과 이름이 지정되어야 함
 - 모든 변수는 사용하기 전에 미리 선언해야함

ex) int korScore,mathScroe;
     cin >> korScore >> mathScore;
     float avrScore = (korScore + mathScore) / 2.0f;

2.3.1 변수의 초기화
 형식1) int total = 0;
          int total(0);
          int total{0};
 

2.3.2 자료형추론
- 변수를 초기화할 때 초기화하는 값의 자료형으로 변수의 자료형을 추론함
  ex) auto i(10); // auto가 10을 int로인식하여 int로취급


2.3.3 변수의 사용영역
- 변수가 유효성을 갖는 영역
   전역변수,지역변수

extern int a;  => 다른파일에 있는변수 참조



2.4 conts와 constexpr

const한정어
- 변수의 값을 수정할 수 없게 함
- 초기화를 통해서만 값을 정할 수 있음
ex) const double PI {3.14159};
    #define PI 3.14159  // 매크로 상수 정의

constexpr 한정어

- 그 값을 컴파일할 때 평가한다는 의미
- 실행 중 값을 평가하는 것에 비해 효율적으로 동작할 수 있게 함

ex) int a;
     std::cin>>a;
     const int b = 20;
     const int C1 = a; // cin을 통해 입력된 a의 값으로 초기화
     constexpr int C2 = a + 10; // 오류 : 컴파일 시에 a의 값을 알 수 없음  


constexpr 함수
- 모든 인수가 constexpr 인 경우 컴파일할 때 값을 구할 수 있게 함


변수의 유효기간
- 변수가 언제 만들어져서 언제 없어지는가를 나타냄
  * 자동변수(지역변수)
    - 생성시점 : 함수가 시작될때  / 함수가 종료될때
  * 정적변수 (전역변수,정적 지역변수)
    - 생성시점 : 프로그램이 시작/종료될때



2.5 산술연산자

2항연산자 : 사칙연산자 + - * /       나머지연산자 : %
  

증감연산자    단항연산자   전위: ++a;--a;   후위:a++;a--;

대입 연산자  =


복합 대입 연산자 
- 이상연산자와 대입연산자를 결합
ex) +=,-=,*=,/=,<<=,>>= 등

관계연산자
>,<,>=,>=,==,!=

논리연산자
||,&&,!

비트단위 논리연산자
|,&,^,~

비트이동연산자
- 좌측이동 << : 우측 피연산자에 지정된 비트 수 만큼 좌측 피연산자를 좌측으로 이동
- 우측이동 >> : 우측피연산자에 지정된 비트수만큼 좌측피연산자를 우측으로 이동
   
삼항연산자
 조건?값1:값2




2.6 형변환

묵시적 형변환

- 우선순위가 높은 자료형의 값과 같은형으로 변환됨
- 오차나 오버플로가 발생할 수 있음


명시적 형번환

 - 형 변환 연산자
   static_cast : 연관된 자료형 간의 형변환을 처리 , 컴파일단계에서 정해짐
   dynamic_cast : 기초 클래스와 파생 클래스 간의 포인터 또는 참조 형 변환이 프로그램 실행중에 일어나도록 지시함
   reinterpret_cast : 관련이 없는 자료형 사이의 변환을 처리, 포인터를 다른자료형의 포인터나 정수 자료형 또는 그 역으로 변환함
   const_cast : const 지정을 일시 해제함

ex) static_cast<int>(n/10.0) 
    형변환연산자 <목표 자료형>(형변환 대상 수식)









